"""
This is an example of a settings module to use for local development. You can
use this example by renaming the file to `__init__.py`, and EDD will load the
module and use its attributes as overrides to the default settings. As this
is a Python module, can create multiple override files, and load them with
`from . import [...]`.
"""

import environ
import errno
import os

# Try to load everything in the common settings files
try:
    from ..auth import *  # noqa: F403
    from ..base import *  # noqa: F403
    from ..base import env
    from ..celery import *  # noqa: F403
    from ..edd import *  # noqa: F403
except ImportError:
    # failed to load existing values
    # oh well carry on without read-and-update ability
    pass

root = environ.Path(__file__) - 3  # we get this out of `from .base import *` too

ALLOWED_HOSTS = ["*"]
# Set the IPs where the Django debug toolbar will be available
# use localhost IPv4 and IPv6
INTERNAL_IPS = ["127.0.0.1", "::1"]
# Add login providers to enable third-party auth
# INSTALLED_APPS = INSTALLED_APPS + (
#     'allauth.socialaccount.providers.github',
#     'allauth.socialaccount.providers.google',
#     'allauth.socialaccount.providers.linkedin_oauth2',
# )

# Setup ADMINS and MANAGERS for this deployment
# Each is a 2-tuple of Name and Email
# ADMINS get emails by default on unhandled exceptions in request/response
# see: https://docs.djangoproject.com/en/4.0/ref/settings/#admins
# MANAGERS get emails on broken links when BrokenLinkEmailsMiddleware is enabled
# see: https://docs.djangoproject.com/en/4.0/ref/settings/#managers
ADMINS = MANAGERS = [
    # Example:
    # ("EDD Managers", "edd-managers@example.net"),
]

# Uncomment this block to work around offsite LDAP authentication problems
# NOTE: this backend ignores passwords, and only validates that the user exists.
# AUTHENTICATION_BACKENDS = (
#     'edd.auth_backend.LocalTestBackend',
# )

# Uncomment this to print emails to the console/logs, rather than attempt
# real SMTP connections
# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# Uncomment below to use DEBUG mode and include the debug toolbar
# DEBUG = True

EDD_ENABLE_GRAPHQL = True

# Add the Django Debug Toolbar to local instance
if DEBUG:  # noqa: F405
    INSTALLED_APPS = INSTALLED_APPS + ("debug_toolbar",)  # noqa: F405
    MIDDLEWARE = (
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ) + MIDDLEWARE  # noqa: F405
    DEBUG_TOOLBAR_CONFIG = {"JQUERY_URL": ""}

# Default LDAP group mirroring will treat LDAP as the *only* source of groups.
#   If using local groups, either:
#    - set a whitelist of groups to mirror with AUTH_LDAP_MIRROR_GROUPS; or
#    - set a blacklist of groups to ignore with AUTH_LDAP_MIRROR_GROUPS_EXCEPT.
#   Using a whitelist will mirror *only* the listed groups from LDAP,
#   and ignore all others.
#   Using a blacklist must list *all* local-only groups,
#   otherwise membership will be removed on next login.
# AUTH_LDAP_MIRROR_GROUPS = ['JBEI']


# The below logging configuration is set up for CI/Jenkins.
# If unsure about logging setup, remove and use the production defaults.
def get_log_filename(name="edd.log"):
    logdir = "/var/log/edd"
    try:
        os.mkdir(logdir)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise e
    return os.path.join(logdir, name)


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "%(asctime)s Thread %(thread)d %(name)-12s %(levelname)-8s %(message)s"
        }
    },
    "filters": {"require_debug_true": {"()": "django.utils.log.RequireDebugTrue"}},
    "handlers": {
        # configure console output only when DEBUG is set
        # prevents noisy output when running tests
        "console": {
            "level": "DEBUG",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        # logging to files inside the container
        "file": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": get_log_filename(),
            "backupCount": 1,
            "maxBytes": 10_000_000,
            "formatter": "simple",
        },
        "queryfile": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": get_log_filename("query.log"),
            "backupCount": 1,
            "maxBytes": 10_000_000,
            "formatter": "simple",
        },
    },
    "loggers": {
        "daphne": {"level": "INFO", "handlers": ["console"]},
        "django.db.backends": {
            "level": "DEBUG",
            "handlers": ["console", "queryfile"],
            "propagate": False,
        },
        "main": {"level": "DEBUG", "handlers": ["console", "file"], "propagate": False},
        "edd": {"level": "DEBUG", "handlers": ["console", "file"], "propagate": False},
        "": {"level": "WARNING", "handlers": ["console", "file"]},
    },
}
