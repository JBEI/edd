""" This is an example of modifications to settings to use for local development. You can use this
    example by renaming the file and removing the -example suffix, and the local version will use
    these modified settings.
"""

import environ
import errno
import os

# Use everything in the common settings file
from .base import *  # noqa: F403

root = environ.Path(__file__) - 3  # we get this out of `from .base import *` too

# Override the default MANAGERS and ADMINS
MANAGERS = ADMINS = (
    ('Jay Bay', 'admin@example.org'),  # <-- CHANGE ME
)

ALLOWED_HOSTS = ['*', ]
# Set the IPs where the Django debug toolbar will be available; use localhost IPv4 and IPv6
INTERNAL_IPS = ['127.0.0.1', '::1', ]
# Add login providers
# INSTALLED_APPS = INSTALLED_APPS + (
#     'allauth.socialaccount.providers.github',
#     'allauth.socialaccount.providers.google',
#     'allauth.socialaccount.providers.linkedin_oauth2',
# )

# Uncomment this block to work around offsite LDAP authentication problems on development laptops
# NOTE: this backend ignores passwords, and does immediate login for the provided username
# AUTHENTICATION_BACKENDS = (
#     'main.account.adapter.LocalTestBackend', # uncomment to simplify off-site development
# )

# Uncomment below to use DEBUG mode and include the debug toolbar
# DEBUG = True

# Add the Django Debug Toolbar to local instance
if DEBUG:  # noqa: F405
    INSTALLED_APPS = INSTALLED_APPS + ('debug_toolbar', )  # noqa: F405
    MIDDLEWARE_CLASSES = (
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    ) + MIDDLEWARE_CLASSES  # noqa: F405
    DEBUG_TOOLBAR_CONFIG = {
        'JQUERY_URL': '',
    }

if env('HTTPS_METHOD', default=None) == 'noredirect':  # noqa: F405
    DEFAULT_HTTP_PROTOCOL = 'http'

# disable the initial new REST API by default since it's insecure. Only needed to support
# create_lines.py and maintain_ice_links.py
PUBLISH_REST_API = True

# False disables signup. A callable object will get called with a request object. A string type
#   will attempt to look up and instantiate an object to use/call.
EDD_ALLOW_SIGNUP = True

# True disables all study creation by non-superusers. Used to disable writes to the public EDD
# until the "web of EDD's" can be implemented.
EDD_ONLY_SUPERUSER_CREATE = False

# Uncomment to give read permission to new studies to a list of user groups by default
# EDD_DEFAULT_STUDY_READ_GROUPS = ['GROUP NAME']

# Default LDAP group mirroring will treat LDAP as the *only* source of groups. If using local
#   groups, either: set a whitelist of groups to mirror from LDAP with AUTH_LDAP_MIRROR_GROUPS; or
#   set a blacklist of groups to ignore with AUTH_LDAP_MIRROR_GROUPS_EXCEPT. Using a whitelist
#   will mirror *only* the listed groups from LDAP, and ignore all others. Using a blacklist must
#   list *all* local-only groups, otherwise membership will be removed on next login.
# AUTH_LDAP_MIRROR_GROUPS = ['JBEI']


###################################################################################################
# You can override the default logging configuration
def get_log_filename(name='edd.log'):
    logdir = root('log')
    try:
        os.mkdir(logdir)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise e
    return root('log', name)


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '%(asctime)s Thread %(thread)d %(name)-12s %(levelname)-8s %(message)s',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true', ],
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': get_log_filename(),
            'formatter': 'simple',
        },
        'queryfile': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': get_log_filename('query.log'),
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django.db.backends': {
            'level': 'DEBUG',
            'handlers': ['console', 'queryfile', ],
            'propagate': False,
        },
        'main': {
            'level': 'DEBUG',
            'handlers': ['console', 'file', ],
            'propagate': False,
        },
        'edd': {
            'level': 'DEBUG',
            'handlers': ['console', 'file', ],
            'propagate': False,
        },
        '': {
            'level': 'DEBUG',
            'handlers': ['console', ],
        }
    },
}
