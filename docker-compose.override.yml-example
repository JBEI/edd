---
# This docker-compose.override.yml file contains local overrides to the Docker Compose
#   configuration of EDD. A copy based on docker-compose.override.yml-example -- containing some
#   example overrides in configuration to use in development environments -- will be created from
#   running the init-config script. Change the values here to alter the settings used when
#   launching with the `docker-compose` commands.

version: '3.7'

networks:
  # Include this network if using the nginx/docker-gen/letsencrypt containers
  proxynet: {}

volumes:

  # Override existing volume definitions by adding an entry with the same name here. If using a
  #   setup with nginx launched with all the other containers, the entries for attachdata and
  #   staticdata will remain empty and have no effect. If using the split nginx configuration,
  #   the entries for both will point to the Docker Volume definitions from the init-config script

  # While the solrdata definition here instructs compose to use the volume named my_volume
  #   in place of the default PROJECTNAME_solrdata volume created by Compose. To use
  #   the my_volume volume, you *must* create it yourself using a command like:
  #   `docker volume create --name my_volume`
  #solrdata:
  #  external:
  #    name: my_volume

  # The nginx volume definitions here are used by the nginx and letsencrypt services later in file
  nginx_certs: {}
  nginx_confd: {}
  nginx_vhost: {}
  nginx_webroot: {}

  # Add new volume definition(s) by creating new name(s).
  #mycustomdata: {}

services:

  # Uncomment a service block to override the settings for that block. Examples below override
  #   settings to expose service ports to all addresses of the Docker host.
  #postgres:
  #  # Make the postgres 5432 port available on the Docker host external network
  #  ports:
  #    - '5432:5432'
  #redis:
  #  # Make the redis 6379 port available on the Docker host external network
  #  ports:
  #    - '6379:6379'
  #solr:
  #  # Make the solr 8983 port available on the Docker host external network
  #  ports:
  #    - '8983:8983'
  #rabbitmq:
  #  # Make the rabbitmq management 15672 port available on the Docker host external network
  #  ports:
  #    - '15672:15672'

  # Override settings for EDD container(s).
  edd:

    # Override image name to reference something other than jbei/edd-core:latest
    #image: tagname

    # Examples of overriding the default initialize command below.
    # To initialize EDD without attempting to run database migrations:
    #command: [-M, application]
    # To initialize EDD without attempting to load a database or re-index:
    #command: [-DI, application]
    # To initialize EDD but wait for a newly-defined service foobar to listen on port 1234:
    #command: [--wait-host, foobar, --wait-port, 1234, application]
    # To run all setup tasks, but not launch the EDD application:
    #command: [init-only]
    # [DEVMODE] By default, edd runs with the application command; uncomment below to run with
    #   the devmode command instead, and use Django's runserver to serve the application.
    # command: [--watch-static, devmode]
    # [LOCAL] For more control over settings on each container, use the --local flag to pass a
    #   path to a local.py file to use. The path must be mounted in the volumes section! Take care
    #   to use only one volumes section, if multiples are specified in a service, only the last
    #   specified is used.
    #command: [--local, /etc/myorg/edd/local.py, -w, edd, application]
    #volumes:
    #  - /full/path/to/local.py:/etc/myorg/edd/local.py

    env_file: secrets/secrets.env
    # Override the default environment
    environment:
      # The following is not strictly necessary, just here so there is not an empty dictionary
      #   if all other keys under 'environment' are commented out.
      EDD_CONTAINER: "edd"

      # Set the deployment environment flag. Supported values are:
      #   * DEVELOPMENT,
      #   * INTEGRATION,
      #   * PRODUCTION,
      #   * TEST,
      #   * or, any of those strings followed by an arbitrary suffix.
      # Values other than PRODUCTION will create obvious labeling differences in the UI to make
      #   them easy to distinguish, and to help prevent accidental data changes in production
      #   during the testing process.
      #EDD_DEPLOYMENT_ENVIRONMENT: "TEST"

      # The edd container has its own environment; there could be a different administrative
      #   user for the worker processes than the main web processes.
      #EDD_USER: "Alice Liddell"
      #EDD_EMAIL: "aliddell@example.net"

      # Uncomment below to run EDD in debug mode
      #EDD_DEBUG: "true"

      # Set these variables to control proxy through nginx
      # NOTE: IP addresses not accepted for VIRTUAL_HOST. For local testing, create an entry in
      # /etc/hosts, e.g. 192.168.99.100 local-development, then add the host name you chose to
      # ALLOWED_HOSTS in your local.py
      VIRTUAL_HOST: "localhost,edd.lvh.me"
      VIRTUAL_PORT: "8000"
      VIRTUAL_STATIC: "true"
      # If doing local-only testing, no certificates are generated, and nginx will not listen on
      #   port 443; set the HTTPS_METHOD to "noredirect" to access via port 80 without automatic
      #   redirect to 443
      HTTPS_METHOD: "noredirect"
      #LETSENCRYPT_HOST: edd.example.net
      #LETSENCRYPT_EMAIL: "aliddell@example.net"
      # The below line directs to use staging Let's Encrypt server. It is commented out by
      #   default, but should be enabled while troubleshooting any errors getting a certificate.
      #   Troubleshooting against the production Let's Encrypt server is likely to hit rate
      #   limits; see <https://letsencrypt.org/docs/staging-environment/>.
      #LETSENCRYPT_TEST: "TRUE"

    # Add in the 'proxynet' network if using the nginx/docker-gen/letsencrypt containers
    networks:
      - proxynet

    # The following ports definition publishes (reading backwards) port 8000 of the container
    #   on port 8000 of the Docker host using the interface (loopback) with IP 127.0.0.1.
    #ports:
    #  - '127.0.0.1:8000:8000'

    # The default mode is also to run with Python code contained within the edd-core image. To run
    #   with a local copy of code and do, e.g. live code reload, uncomment and edit the volume
    #   below. The first part is your local filesystem path, and /code is the location where the
    #   container will expect externally-loaded code. This setting will ONLY apply to the container
    #   where it is defined; overrides occur after the extends in the base file. If mounting code
    #   in the edd service, one should also mount code in the appserver and worker services.
    #volumes:
    #  - /full/path/to/source:/code

  websocket:

    # Override image name to reference something other than jbei/edd-core:latest
    #image: tagname

    env_file: secrets/secrets.env
    # Override the default environment to direct errors to the guilty.
    environment:
      # The following is not strictly necessary, just here so there is not an empty dictionary
      EDD_CONTAINER: "websocket"

      # Set these variables to control proxy through nginx
      # NOTE: IP addresses not accepted for VIRTUAL_HOST. For local testing, create an entry in
      # /etc/hosts, e.g. 192.168.99.100 local-development, then add the host name you chose to
      # ALLOWED_HOSTS in your local.py
      VIRTUAL_HOST: "localhost,edd.lvh.me"
      VIRTUAL_PORT: "8000"

      # The websocket container has its own environment; there could be a different administrative
      #   user for the websocket processes than the main web processes.
      #EDD_USER: "Alice Liddell"
      #EDD_EMAIL: "aliddell@example.net"

    # Add in the 'proxynet' network if using the nginx/docker-gen/letsencrypt containers
    networks:
      - proxynet

    # Mount a development copy of code, rather than using the code in the image, using volumes.
    #volumes:
    #  - /full/path/to/source:/code

  worker:

    # Override image name to reference something other than jbei/edd-core:latest
    #image: tagname

    env_file: secrets/secrets.env
    # Override the default environment to direct errors to the guilty.
    environment:
      # The following is not strictly necessary, just here so there is not an empty dictionary
      EDD_CONTAINER: "worker"

      # The worker container has its own environment; there could be a different administrative
      #   user for the worker processes than the main web processes.
      #EDD_USER: "Alice Liddell"
      #EDD_EMAIL: "aliddell@example.net"

    # Mount a development copy of code, rather than using the code in the image, using volumes.
    #volumes:
    #  - /full/path/to/source:/code

  # To start the Flower queue monitoring tool, uncomment the flower section below.
  #   Set the VIRTUAL_* environment variables to appropriate values.
  # flower:
  #   build: ./docker/flower/
  #   image: jbei/flower:1.0.1
  #   restart: always
  #   env_file: secrets/secrets.env
  #   environment:
  #     AMQP_ADMIN_HOST: rabbitmq
  #     AMQP_ADMIN_USERNAME: edd_user
  #     AMQP_HOST: rabbitmq
  #     AMQP_USERNAME: edd_user
  #     AMQP_VHOST: edd
  #     FLOWER_USERNAME: flower
  #     HTTPS_METHOD "noredirect"
  #     VIRTUAL_HOST: "flower.lvh.me"
  #     VIRTUAL_PORT: "5555"
  #   networks:
  #     - backnet
  #     - proxynet
  #   links:
  #     - rabbitmq
  #   expose:
  #     - '5555'
  #   healthcheck:
  #     test: ['CMD', '/opt/celery-flower/healthcheck.sh']
  #     interval: 1m
  #     timeout: 5s
  #     retries: 3
  #   logging:
  #     driver: 'json-file'
  #     options:
  #       max-size: 1m
  #       max-file: '5'

  # To expose the Solr admin interface, uncomment the solr section below
  # solr:
  #   environment:
  #     VIRTUAL_HOST: "solr.lvh.me"
  #     VIRTUAL_PORT: "8983"
  #   networks:
  #     - proxynet

  # To expose the RabbitMQ management interface, uncomment the VIRTUAL_* environment variables
  #   and the proxynet network listing below
  # rabbitmq:
  #   environment:
  #     VIRTUAL_HOST: "rabbitmq.lvh.me"
  #     VIRTUAL_PORT: "15672"
  #   networks:
  #     - proxynet

  # The section below, until the comment reading "END LET'S ENCRYPT CONFIGS" contains a set of
  #   container configurations that automate using Let's Encrypt for TLS certificates for an
  #   nginx webserver fronting EDD. This is provided for convenience in development and evaluation
  #   of EDD. We recommend production deployments to replace this with the webserver/proxy used
  #   by other applications in your organization. More details about the configs below can be
  #   found in the $EDD_INSTALL/docker_services/nginx/README.md
  # START LET'S ENCRYPT CONFIGS
  nginx:
    build: ./docker/nginx/nginx/
    image: jbei/nginx:mainline
    init: true
    restart: always
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true
    networks:
      - proxynet
    volumes:
      - nginx_confd:/etc/nginx/conf.d
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_webroot:/usr/share/nginx/html
      - nginx_certs:/etc/nginx/certs:ro
      - edd_attachments:/usr/share/nginx/html/uploads:ro
      - edd_staticfiles:/usr/share/nginx/html/static:ro
    logging:
      driver: 'json-file'
      options:
        max-size: 1m
        max-file: '5'
    ports:
      # Make the http/https ports available on the Docker host
      - '80:80'
      - '443:443'
  nginx-gen:
    build: ./docker/nginx/nginx-gen/
    image: jbei/nginx-gen:latest
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.docker_gen=true
    networks:
      - proxynet
    volumes:
      - nginx_confd:/etc/nginx/conf.d
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_webroot:/usr/share/nginx/html
      - nginx_certs:/etc/nginx/certs:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
    logging:
      driver: 'json-file'
      options:
        max-size: 1m
        max-file: '5'
  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    depends_on:
      - nginx
      - edd
    networks:
      - proxynet
    volumes:
      - nginx_confd:/etc/nginx/conf.d
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_webroot:/usr/share/nginx/html
      - nginx_certs:/etc/nginx/certs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    logging:
      driver: 'json-file'
      options:
        max-size: 1m
        max-file: '5'
  # END LET'S ENCRYPT CONFIGS
