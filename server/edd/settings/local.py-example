"""
This is an example of modifications to settings to use for local development. You can use this
example by renaming the file and removing the -example suffix, and the local version will use
these modified settings.
"""

import environ
import errno
import os

# Use everything in the common settings file
from .base import *  # noqa: F403

root = environ.Path(__file__) - 3  # we get this out of `from .base import *` too

# Override the default MANAGERS and ADMINS; each item is 2-tuple of name and email
MANAGERS = ADMINS = (
    (
        env("EDD_USER", default="Jay Bay"),  # noqa: F405
        env("EDD_EMAIL", default="admin@example.org"),  # noqa: F405
    ),
)

ALLOWED_HOSTS = ["*"]
# Set the IPs where the Django debug toolbar will be available; use localhost IPv4 and IPv6
INTERNAL_IPS = ["127.0.0.1", "::1"]
# Add login providers
# INSTALLED_APPS = INSTALLED_APPS + (
#     'allauth.socialaccount.providers.github',
#     'allauth.socialaccount.providers.google',
#     'allauth.socialaccount.providers.linkedin_oauth2',
# )


# Uncomment this block to work around offsite LDAP authentication problems on development laptops
# NOTE: this backend ignores passwords, and does immediate login for the provided username
# AUTHENTICATION_BACKENDS = (
#     'main.account.adapter.LocalTestBackend', # uncomment to simplify off-site development
# )


# Add any in-progress app development like this:
INSTALLED_APPS = INSTALLED_APPS + ("edd_file_importer",)  # noqa: F405


# Uncomment below to use DEBUG mode and include the debug toolbar
# DEBUG = True

# Add the Django Debug Toolbar to local instance
if DEBUG:  # noqa: F405
    INSTALLED_APPS = INSTALLED_APPS + ("debug_toolbar",)  # noqa: F405
    MIDDLEWARE = (
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ) + MIDDLEWARE  # noqa: F405
    DEBUG_TOOLBAR_CONFIG = {"JQUERY_URL": ""}

# Default LDAP group mirroring will treat LDAP as the *only* source of groups. If using local
#   groups, either: set a whitelist of groups to mirror from LDAP with AUTH_LDAP_MIRROR_GROUPS; or
#   set a blacklist of groups to ignore with AUTH_LDAP_MIRROR_GROUPS_EXCEPT. Using a whitelist
#   will mirror *only* the listed groups from LDAP, and ignore all others. Using a blacklist must
#   list *all* local-only groups, otherwise membership will be removed on next login.
# AUTH_LDAP_MIRROR_GROUPS = ['JBEI']


# The below logging configuration is set up for CI/Jenkins.
# If unsure about logging setup, remove and use the production defaults.
def get_log_filename(name="edd.log"):
    logdir = "/var/log/edd"
    try:
        os.mkdir(logdir)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise e
    return os.path.join(logdir, name)


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "%(asctime)s Thread %(thread)d %(name)-12s %(levelname)-8s %(message)s"
        }
    },
    "filters": {
        "require_debug_true": {"()": "django.utils.log.RequireDebugTrue"},
    },
    "handlers": {
        # configure console output only when DEBUG is set
        # prevents noisy output when running tests
        "console": {
            "level": "DEBUG",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        # logging to files inside the container
        "file": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": get_log_filename(),
            "backupCount": 1,
            "maxBytes": 10_000_000,
            "formatter": "simple",
        },
        "queryfile": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": get_log_filename("query.log"),
            "backupCount": 1,
            "maxBytes": 10_000_000,
            "formatter": "simple",
        },
    },
    "loggers": {
        "daphne": {"level": "INFO", "handlers": ["console"]},
        "django.db.backends": {
            "level": "DEBUG",
            "handlers": ["console", "queryfile"],
            "propagate": False,
        },
        "main": {"level": "DEBUG", "handlers": ["console", "file"], "propagate": False},
        "edd": {"level": "DEBUG", "handlers": ["console", "file"], "propagate": False},
        "": {"level": "WARNING", "handlers": ["console", "file"]},
    },
}
