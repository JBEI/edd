## Environment variables containing secrets
## Meant to be loaded into Docker environment via Docker Compose


# When configuring this file, search-replace "secret{n}"" values below with secure/memorable
# passwords. Of necessity in Docker-compose files, some of the values are unfortunately repeated
# several times.
# When setting these passwords, it's important to keep in mind which of EDD's Docker
# services are exposed on your host.  See docker-compose.yml and docker-compose-override.yml or
# run 'docker-compose ps' with the containers running to see which services/ports are exposed
#  in your deployment. Any exposed services on your host must have a secure password.
#
# By default, EDD's sample files will only expose the nginx container ports,
# which proxy web traffic for the EDD appserver and for the web management interfaces for RabbitMQ
# and Flower. At a minimum, you should set secure-but-memorable passwords for the RabbitMQ and
# Flower web interfaces. It's best to set secure passwords for everything in case you change
# which ports are exposed later on.  For convenience, these passwords are configured in each
# service when it's run for the first time. It's the least amount of work to set passwords
# here before launching EDD for the first time. Otherwise, you'll have to individually configure
# each service later to change its password, then update the value here so it can be accessed by
# other services.

# Passwords configured here are:
#   * `secret1` a password you choose for the `postgres` PostgreSQL user (the master database
#       user account for EDD's Postgres Docker container).
#   * `secret2` is a password you choose for the `edduser` PostgreSQL user account. This is the
#      dedicated account EDD uses to access the database.
#   * `secret3` is a password you choose for the `edd_user` RabbitMQ user. This is a dedicated
#      account EDD uses to communicate with the Celery distributed task queue.
#   * `secret4` is a password you choose for the `flower` Flower RabbitMQ user. This is the
#      dedicated account Flower uses to interface with / control Celery.
#   * `ICE_HMAC_KEY` is the secret key EDD uses to authenticate its communication with ICE;
#      set this to the secret you've configured in ICE
#   * `LDAP_PASS` is the password for the `jbei_auth` LDAP user by default; you
#     may use your own password by including in your `./edd/settings/local.py`:
#     `AUTH_LDAP_BIND_DN = 'lblEmpNum=[your-six-digit-id],ou=People,dc=lbl,dc=gov'`

# These are used when initializing the postgres service
POSTGRES_PASSWORD=secret1
EDD_PGPASS=secret2

# Django secret key: pick some random text
# https://docs.djangoproject.com/en/1.9/ref/settings/#secret-key
SECRET_KEY=put some random secret text here

# Database URL+credentials; format is psql://[USER]:[PASS]@[HOST]:[PORT]/[NAME]
DATABASE_URL=psql://edduser:secret2@postgres:5432/edd

# Cache URL for Redis
CACHE_URL=rediscache://redis:6379/1?client_class=django_redis.client.DefaultClient

# RabbitMQ image config
RABBITMQ_DEFAULT_PASS=secret3

# Rabbitmq URL+credentials; format is amqp://[USER]:[PASS]@[HOST]:[PORT]/[VHOST]
BROKER_URL=amqp://edd_user:secret3@rabbitmq:5672/edd

# Solr search URL; usually not a secret, and set via docker-compose.yml
#   Override here if using basic auth
# SEARCH_URL=solr://user:secret@solr:8983/solr/

# Flower config
AMQP_ADMIN_PASSWORD=secret3
AMQP_PASSWORD=secret3
FLOWER_BASIC_AUTH=flower:secret4
FLOWER_BROKER_API=http://edd_user:secret3@rabbitmq:15672/api/

# Celery Results Backend URL+credentials;
CELERY_RESULT_BACKEND=db+postgresql://edduser:secret2@postgres:5432/celery

# ICE<-->EDD
ICE_HMAC_KEY=

# LDAP credentials
LDAP_PASS=
